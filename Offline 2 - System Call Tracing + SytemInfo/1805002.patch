diff --git a/Makefile b/Makefile
index 39a99d7..b1463c1 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,11 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_myprog\
+	$U/_trace\
+	$U/_sysinfotest\
+
+ 
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..f124ee9 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -16,6 +16,7 @@ void            brelse(struct buf*);
 void            bwrite(struct buf*);
 void            bpin(struct buf*);
 void            bunpin(struct buf*);
+int             free_mem_count();
 
 // console.c
 void            consoleinit(void);
@@ -106,6 +107,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             sysinfo(void);
+
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..4bb2029 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -80,3 +80,14 @@ kalloc(void)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+int free_mem_count(){
+  struct run *current;
+  acquire(&kmem.lock);
+  current = kmem.freelist;
+  int bytes = 0;
+  for(current = kmem.freelist; current != 0; current = current->next)
+    bytes ++;
+  release(&kmem.lock);
+  return bytes;
+}
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..0baaec7 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -169,6 +169,7 @@ freeproc(struct proc *p)
   p->killed = 0;
   p->xstate = 0;
   p->state = UNUSED;
+  p->tracePID = 0;          // added to free the "tracePID" attribute in sproc struct
 }
 
 // Create a user page table for a given process, with no user memory,
@@ -298,6 +299,7 @@ fork(void)
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
+  np->tracePID = p->tracePID;
 
   // Cause fork to return 0 in the child.
   np->trapframe->a0 = 0;
@@ -622,6 +624,32 @@ killed(struct proc *p)
   return k;
 }
 
+int
+get_proc_count(){
+  struct proc *p;
+  int count = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state != UNUSED)
+      count ++;
+    release(&p->lock);
+  }
+  return count;
+}
+
+int sysinfo(){
+  int n = get_proc_count();
+  int freeMemory = free_mem_count()*4096;
+
+  printf("\nsysinfo system call prints:\nfree memory: %d bytes\nn_proc: %d\n\n", freeMemory, n);
+
+  return 0;
+}
+
+
+
+
+
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
@@ -652,6 +680,7 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
   }
 }
 
+
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..0c703b7 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -92,6 +92,8 @@ struct proc {
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
 
+  int tracePID;                //newly added
+
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
 
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..6893a15 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -7,6 +7,10 @@
 #include "syscall.h"
 #include "defs.h"
 
+int systemTraced = -1;
+int markedPID = -1;
+
+
 // Fetch the uint64 at addr from the current process.
 int
 fetchaddr(uint64 addr, uint64 *ip)
@@ -102,6 +106,9 @@ extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
 
+extern uint64 sys_trace(void);
+extern uint64 sys_sysinfo(void);
+
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,19 +133,56 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+
+[SYS_trace]   sys_trace,
+[SYS_sysinfo] sys_sysinfo,
+};
+
+char *syacall_namestr[] = {
+  [SYS_fork]    "fork",
+  [SYS_exit]    "exit",
+  [SYS_wait]    "wait",
+  [SYS_pipe]    "pipe",
+  [SYS_read]    "read",
+  [SYS_kill]    "kill",
+  [SYS_exec]    "exec",
+  [SYS_fstat]   "fstat",
+  [SYS_chdir]   "chdir",
+  [SYS_dup]     "dup",
+  [SYS_getpid]  "getpid",
+  [SYS_sbrk]    "sbrk",
+  [SYS_sleep]   "sleep",
+  [SYS_uptime]  "uptime",
+  [SYS_open]    "open",
+  [SYS_write]   "write",
+  [SYS_mknod]   "mknod",
+  [SYS_unlink]  "uplink",
+  [SYS_link]    "link",
+  [SYS_mkdir]   "mkdir",
+  [SYS_close]   "close",
+
+  [SYS_trace]   "trace",
+  [SYS_sysinfo] "sysinfo",
 };
 
 void
 syscall(void)
-{
+{ 
   int num;
   struct proc *p = myproc();
-
   num = p->trapframe->a7;
+  if(num == p->tracePID){
+    printf("pid : %d, syscall: %s, return value: ", p->pid, syacall_namestr[num]);
+  }
+
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
     p->trapframe->a0 = syscalls[num]();
+      if(num == p->tracePID){
+        printf("%d\n", p->trapframe->a0);
+      }
+
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..595763c 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,8 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace 22
+#define SYS_sysinfo 23
+
+
+
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..1466c05 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -6,6 +6,7 @@
 #include "spinlock.h"
 #include "proc.h"
 
+
 uint64
 sys_exit(void)
 {
@@ -89,3 +90,22 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+
+uint64 sys_trace()
+{
+  int pid;
+  struct proc *p = myproc();
+  argint(0, &pid);
+
+  //printf("pid is %d\n", pid);
+  //trace(pid);
+  p->tracePID = pid;
+
+  return 0;
+}
+
+uint64 sys_sysinfo(void){
+  return sysinfo();
+}
\ No newline at end of file
diff --git a/user/myprog.c b/user/myprog.c
new file mode 100644
index 0000000..55339e4
--- /dev/null
+++ b/user/myprog.c
@@ -0,0 +1,15 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(){
+
+    printf("hello world\n");
+    char buf[10];           // integer buffer : cant be more than 10 digits
+    gets(buf, 9);           // last index for "/0" ASCII
+    int input = atoi(buf);  //returns integer
+
+    printf("%d^2 = %d", input, input*input);
+
+    return 0;
+}
\ No newline at end of file
diff --git a/user/sysinfotest.c b/user/sysinfotest.c
new file mode 100644
index 0000000..25ade16
--- /dev/null
+++ b/user/sysinfotest.c
@@ -0,0 +1,72 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+
+void
+sinfo() {
+  if (sysinfo() < 0) {
+    printf("FAIL: sysinfo failed");
+    exit(1);
+  }
+}
+
+
+void
+testmem() {
+  printf("\n\t\t\tTesting memory\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  printf("Using up one more page (4094 bytes).\nFreemem should reduce by that much!\n");
+  if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+
+  printf("Giving back that one more page to the pool (4094 bytes).\nFreemem should go back to the initial value!\n");
+  
+  if((uint64)sbrk(-PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  sinfo();
+}
+
+void testproc() {
+  int status;
+  int pid;
+
+  printf("\n\t\t\tTesting nproc\n");
+  printf("\nInitial State\n");
+  sinfo();
+
+  pid = fork();
+  if(pid < 0){
+    printf("sysinfotest: fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){  // inside the child process
+    printf("Created one new process. So nproc should increase by 1.");
+    sinfo();
+    exit(0);
+  }
+
+  wait(&status); // wait for the created child process to end
+  printf("Created process ended. So nproc should go back to initial value.");
+  sinfo(); 
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  printf("sysinfotest: start\n");
+  testmem();
+  testproc();
+  printf("sysinfotest: done\n");
+  exit(0);
+}
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..1e322ce
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..0ceec2a 100644
--- a/user/user.h
+++ b/user/user.h
@@ -23,6 +23,9 @@ char* sbrk(int);
 int sleep(int);
 int uptime(void);
 
+int trace(int);     // newly added
+int sysinfo(void);  // newly added
+
 // ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..336e0ca 100644
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");   
+entry("sysinfo");  
