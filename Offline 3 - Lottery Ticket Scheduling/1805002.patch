diff --git a/Makefile b/Makefile
index 39a99d7..39f876a 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_testticket\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/MyRandom.h b/kernel/MyRandom.h
new file mode 100644
index 0000000..cf04e3c
--- /dev/null
+++ b/kernel/MyRandom.h
@@ -0,0 +1,68 @@
+ //#include <stdio.h>
+//  #include <stdlib.h>
+#include <time.h>
+
+//#include <stdio.h>
+ 
+/* always assuming int is at least 32 bits */
+int rand();
+int rseed = 0;
+ 
+inline void srand(int x) {
+    rseed = x;
+}
+ 
+#ifndef MS_RAND
+#define RAND_MAX ((1U << 31) - 1)
+ 
+inline int rand() {
+    return rseed = (rseed * 1103515245 + 12345) & RAND_MAX;
+}
+ 
+#else /* MS rand */
+ 
+#define RAND_MAX_32 ((1U << 31) - 1)
+#define RAND_MAX ((1U << 15) - 1)
+ 
+inline int rand()
+{
+    return (rseed = (rseed * 214013 + 2531011) & RAND_MAX_32) >> 16;
+}
+ 
+#endif/* MS_RAND */
+
+int getRandom(float a){
+    //srand((unsigned int)time(0));
+    //float a = 5.0;
+    
+    //int r = ((float)rand()/(float)(RAND_MAX)) * a;
+    //srand(0);
+    //printf("%d", rand());
+    return rand();
+}
+
+unsigned int lfsr113_Bits (void)
+{
+   static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
+   unsigned int b;
+   b  = ((z1 << 6) ^ z1) >> 13;
+   z1 = ((z1 & 4294967294U) << 18) ^ b;
+   b  = ((z2 << 2) ^ z2) >> 27; 
+   z2 = ((z2 & 4294967288U) << 2) ^ b;
+   b  = ((z3 << 13) ^ z3) >> 21;
+   z3 = ((z3 & 4294967280U) << 7) ^ b;
+   b  = ((z4 << 3) ^ z4) >> 12;
+   z4 = ((z4 & 4294967168U) << 13) ^ b;
+   return (z1 ^ z2 ^ z3 ^ z4);
+}
+
+int getRandom2(int lower, int higher){
+    int temp;
+    if(higher < lower){
+        temp = lower;
+        lower = higher;
+        higher = temp;
+    }
+    int range = higher - lower + 1;
+    return ((lfsr113_Bits()%range) + lower);
+}
\ No newline at end of file
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..c097eae 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,9 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(struct proc*, int);
+int             getpinfo(struct pstat*);
+//int             getpinfo(uint64);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..708299d 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,8 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "MyRandom.h"
+#include "pstat.h"
 
 struct cpu cpus[NCPU];
 
@@ -124,6 +126,9 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->original_ticket = 1;
+  p->current_ticket = 1;
+  p->time_slices = 0;
 
   // Allocate a trapframe page.
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
@@ -287,6 +292,8 @@ fork(void)
   if((np = allocproc()) == 0){
     return -1;
   }
+  np->current_ticket = p->original_ticket;
+  np->original_ticket = p->original_ticket;
 
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
@@ -295,6 +302,7 @@ fork(void)
     return -1;
   }
   np->sz = p->sz;
+  //settickets(np, p->original_ticket);
 
   // copy saved user registers.
   *(np->trapframe) = *(p->trapframe);
@@ -364,6 +372,7 @@ exit(int status)
   iput(p->cwd);
   end_op();
   p->cwd = 0;
+  //settickets(p, 0);
 
   acquire(&wait_lock);
 
@@ -377,6 +386,7 @@ exit(int status)
 
   p->xstate = status;
   p->state = ZOMBIE;
+  
 
   release(&wait_lock);
 
@@ -434,6 +444,93 @@ wait(uint64 addr)
   }
 }
 
+int checkForAllZero(){
+  struct proc *p;
+  int count = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == RUNNABLE && p->current_ticket != 0){
+      count ++;
+    }   
+    release(&p->lock);
+  }
+  return count;
+}
+
+void reinstateTicket(){
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    p->current_ticket = p->original_ticket;
+    release(&p->lock);
+  }
+}
+
+void printAllProcTickets(){
+  struct proc *p;
+  for(p = proc; p< &proc[NPROC]; p++){
+    
+    printf("pid: %d, og: %d, curr: %d\n", p->pid, p->original_ticket, p->current_ticket);
+  }
+}
+
+int sumOfTickets(){
+  struct proc *p;
+  int sum = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    acquire(&p->lock);
+    if(p->state == RUNNABLE)
+      sum += p->current_ticket;
+    //printf("%d\n", sum);
+    release(&p->lock);
+  }
+  return sum;
+}
+
+void 
+scheduler(void){
+  struct proc *p;
+  struct cpu *c = mycpu();
+  
+  c->proc = 0;
+  for(;;){
+    // Avoid deadlock by ensuring that devices can interrupt.
+    intr_on();
+
+    if (checkForAllZero() == 0) {
+      reinstateTicket();
+    } 
+
+    int sum = sumOfTickets();
+    int random = getRandom2(0, sum);
+    int check = 0;
+    for(p = proc; p < &proc[NPROC]; p++) {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE && p->current_ticket) {
+        // Switch to chosen process.  It is the process's job
+        // to release its lock and then reacquire it
+        // before jumping back to us.
+        check += p->current_ticket;
+        if (check >= random) {
+          p->state = RUNNING;
+          c->proc = p;
+          p->time_slices++;
+
+          swtch(&c->context, &p->context);
+
+          p->current_ticket--;
+          // Process is done running for now.
+          // It should have changed its p->state before coming back.
+          c->proc = 0;
+          release(&p->lock);
+          break;
+        }
+      }
+      release(&p->lock);
+    }
+  }
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -442,7 +539,7 @@ wait(uint64 addr)
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
 void
-scheduler(void)
+scheduler0(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
@@ -681,3 +778,70 @@ procdump(void)
     printf("\n");
   }
 }
+
+int
+settickets(struct proc *p, int number){
+  //printf("%d\n", number);
+  //struct proc *p = myproc();
+  if(number < 1)
+    return -1;
+
+  acquire(&p->lock);
+  p->original_ticket = number;
+  p->current_ticket = number;
+  p->time_slices = 0;
+  release(&p->lock);
+  // printAllProcTickets();
+  return 0;
+}
+
+// int 
+// getpinfo(uint64 address){
+//   struct proc *p = myproc();
+//   struct pstat ps;
+//   int i = 0;
+//   for(p = proc; p < &proc[NPROC]; p++){
+//     ps.pid[i] = p->pid;
+//     ps.tickets_original[i] = p->original_ticket;
+//     ps.tickets_current[i] = p->current_ticket;
+//     ps.time_slices[i] = p->time_slices;
+//     if(p->state == UNUSED){
+//       ps.inuse[i] = 0;
+//     }else
+//       ps.inuse[i] = 1;
+//     i++;
+//   }
+//   if(address != 0 && (copyout(p->pagetable, address, (char *)&ps, sizeof(ps))) < 0){
+//     return 0;
+//   }else
+//     return -1;
+//   //return 0;
+// }
+
+int
+getpinfo(struct pstat* ps){
+  struct proc *p; // = myproc();
+  //struct pstat *ps;
+  int i = 0;
+  for(p = proc; p < &proc[NPROC]; p++){
+    ps->pid[i] = p->pid;
+    ps->tickets_original[i] = p->original_ticket;
+    ps->tickets_current[i] = p->current_ticket;
+    ps->time_slices[i] = p->time_slices;
+    if(p->state == UNUSED){
+      ps->inuse[i] = 0;
+    }else
+      ps->inuse[i] = 1;
+
+    i++;
+  }
+  // for(int i=0; i<NPROC; i++){
+  //       if(ps->inuse[i] == 1){
+  //           printf("%d\t %d\t\t %d\t\t %d\t\t %d\n", 
+  //           ps->pid[i], ps->inuse[i], ps->tickets_original[i], ps->tickets_current[i], ps->time_slices[i]);
+  //       }
+  //   }
+
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..ff538d5 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -91,6 +91,10 @@ struct proc {
   int killed;                  // If non-zero, have been killed
   int xstate;                  // Exit status to be returned to parent's wait
   int pid;                     // Process ID
+  
+  int original_ticket;
+  int current_ticket;
+  int time_slices;
 
   // wait_lock must be held when using this:
   struct proc *parent;         // Parent process
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..7bd002f
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,13 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+    int pid[NPROC]; // the process ID of each process
+    int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+    int tickets_original[NPROC]; // the number of tickets each process originally had
+    int tickets_current[NPROC]; // the number of tickets each process currently has
+    int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..8694a39 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -6,6 +6,7 @@
 #include "proc.h"
 #include "syscall.h"
 #include "defs.h"
+//#include "MyRandom.h"
 
 // Fetch the uint64 at addr from the current process.
 int
@@ -102,6 +103,9 @@ extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
 
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
+
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
 static uint64 (*syscalls[])(void) = {
@@ -126,6 +130,9 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+
+[SYS_settickets] sys_settickets,
+[SYS_getpinfo] sys_getpinfo,
 };
 
 void
@@ -134,6 +141,9 @@ syscall(void)
   int num;
   struct proc *p = myproc();
 
+  // printf("system call function\n");
+  // float rand = getRandom(100);
+  // printf("%f\n", rand);
   num = p->trapframe->a7;
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..7926b7f 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets 22
+#define SYS_getpinfo 23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..683dfc8 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -5,6 +5,7 @@
 #include "memlayout.h"
 #include "spinlock.h"
 #include "proc.h"
+#include "pstat.h"
 
 uint64
 sys_exit(void)
@@ -89,3 +90,29 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void){
+  int ticket_number;
+  struct proc *p = myproc();
+
+  argint(0, &ticket_number);
+  return settickets(p, ticket_number);
+  //return 1;
+}
+
+uint64
+sys_getpinfo(void){
+  struct pstat temp;
+  struct proc *p = myproc();
+  uint64 input;
+  argaddr(0, &input);
+  if(!input)
+    return -1;
+
+  getpinfo(&temp);
+
+  copyout(p->pagetable, input, (char *)&temp, sizeof(temp));
+  return 0;
+  
+}
\ No newline at end of file
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..568bc8e
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,23 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/pstat.h"
+//#include "user/MyRandom.h"
+
+int
+main(int argc, char *argv[]){
+
+    //printf("hello\n");
+    struct pstat ps;
+    getpinfo(&ps);
+    printf("PID | In Use | Original Tickets | Current Tickets | Time Slices\n");
+    for(int i=0; i<NPROC; i++){
+        if(ps.inuse[i] == 1){
+            printf("%d\t %d\t %d\t %d\t %d\n", 
+            ps.pid[i], ps.inuse[i], ps.tickets_original[i], ps.tickets_current[i], ps.time_slices[i]);
+        }
+    }
+    exit(0);
+    //return 0;
+}
diff --git a/user/testticket.c b/user/testticket.c
new file mode 100644
index 0000000..4389fa5
--- /dev/null
+++ b/user/testticket.c
@@ -0,0 +1,30 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+//#include "user/MyRandom.h"
+
+int
+main(int argc, char *argv[]){
+
+    //int proc1, proc2;
+    // printf("hello\n");
+    // if((proc1 = fork()) == 0){
+    //     settickets(5);
+    // }
+    // else if((proc2 = fork()) == 0){
+    //     settickets(8);
+    // }
+
+    // while(1){}
+
+    settickets(atoi(argv[1]));
+    int rc = fork();
+    if (rc == 0)
+        while(1);
+    else if (rc < 0) {
+        printf("fork() failed.\n");
+        exit(1);
+    }
+    return 0;
+}
diff --git a/user/user.h b/user/user.h
index 4d398d5..64b8048 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
