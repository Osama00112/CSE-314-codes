diff --git a/Makefile b/Makefile
index 39a99d7..6d6be9b 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -132,6 +133,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_test1\
+	$U/_test2\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..2535cfb 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
 
 // bio.c
 void            binit(void);
@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -63,6 +66,12 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+void            addLivePage(pagetable_t, uint64);
+void            removeLivePage(pagetable_t, uint64);
+void            swapInAndUpdateList(pagetable_t, uint64, uint64);
+void            removeSwapListElement(pagetable_t, uint64);
+void            printLivePageList();
+void            printLivePageCount();
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -107,6 +116,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
 
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
+
 // swtch.S
 void            swtch(struct context*, struct context*);
 
@@ -162,7 +178,7 @@ void            kvmmap(pagetable_t, uint64, uint64, uint64, int);
 int             mappages(pagetable_t, uint64, uint64, uint64, int);
 pagetable_t     uvmcreate(void);
 void            uvmfirst(pagetable_t, uchar *, uint);
-uint64          uvmalloc(pagetable_t, uint64, uint64, int);
+uint64          uvmalloc(pagetable_t, uint64, uint64, int, int);
 uint64          uvmdealloc(pagetable_t, uint64, uint64);
 int             uvmcopy(pagetable_t, pagetable_t, uint64);
 void            uvmfree(pagetable_t, uint64);
diff --git a/kernel/exec.c b/kernel/exec.c
index e18bbb6..a8c5980 100644
--- a/kernel/exec.c
+++ b/kernel/exec.c
@@ -62,7 +62,7 @@ exec(char *path, char **argv)
     if(ph.vaddr % PGSIZE != 0)
       goto bad;
     uint64 sz1;
-    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags))) == 0)
+    if((sz1 = uvmalloc(pagetable, sz, ph.vaddr + ph.memsz, flags2perm(ph.flags), 1)) == 0)
       goto bad;
     sz = sz1;
     if(loadseg(pagetable, ph.vaddr, ip, ph.off, ph.filesz) < 0)
@@ -80,7 +80,7 @@ exec(char *path, char **argv)
   // Use the second as the user stack.
   sz = PGROUNDUP(sz);
   uint64 sz1;
-  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W)) == 0)
+  if((sz1 = uvmalloc(pagetable, sz, sz + 2*PGSIZE, PTE_W, -1)) == 0)
     goto bad;
   sz = sz1;
   uvmclear(pagetable, sz-2*PGSIZE);
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..daec4d8 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -9,6 +9,11 @@
 #include "riscv.h"
 #include "defs.h"
 
+#define MAXPAGES 50
+
+int livePageCount;
+int swappedPageCount;
+
 void freerange(void *pa_start, void *pa_end);
 
 extern char end[]; // first address after kernel.
@@ -23,10 +28,184 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct pageInfo{
+  pagetable_t pt;
+  uint64 va;
+};
+
+struct swappedOutRecord{
+  struct swap *s;
+  pagetable_t pt;
+  uint64 va;
+};
+
+struct pageInfo livePageList[MAXPAGES];
+struct swappedOutRecord swappedList[10000] = {0};
+
+// remove the swap record with corresponding pid and va
+void removeSwapListElement(pagetable_t pt, uint64 va){
+  struct swappedOutRecord desired;
+  int index = -1;
+
+  for(int i=0; i<swappedPageCount; i++){
+    if(swappedList[i].pt == pt && swappedList[i].va == va){
+      index = i;
+      break;
+    }
+  }
+
+  if(index == -1){
+    //panic("panic: cant find swapped out page(va) in the list\n");
+    return;
+  }
+
+  desired = swappedList[index];
+
+  //struct proc *p = getProc(pid);
+  //pte_t *pte = walk(pt, va, 0);
+
+
+
+  for(int i=index; i<swappedPageCount-1; i++){
+    swappedList[i] = swappedList[i+1];
+  }
+  swappedList[swappedPageCount-1] = (struct swappedOutRecord) {0};
+  swapfree(desired.s);
+  swappedPageCount --;
+}
+
+void swapInAndUpdateList(pagetable_t pt, uint64 va, uint64 pa){
+  printf("inside swapINNNN looking for record with pt = %p, va = %p, to swap at pa = %p\n" , pt, va, pa);
+  struct swappedOutRecord desired;
+  int index = -1;
+
+  for(int i=0; i<swappedPageCount; i++){
+    //printf("i=%p: pt=%p, va=%p\n", i, swappedList[i].pt, swappedList[i].va);
+    if(swappedList[i].pt == pt && swappedList[i].va == va){
+      index = i;
+      break;
+    }
+  }
+
+  if(index == -1){
+    panic("swapInAndUpdate() cant find swapped out page(va) in the list\n");
+  }
+  
+  desired = swappedList[index];
+  for(int i=index; i<swappedPageCount-1; i++){
+    swappedList[i] = swappedList[i+1];
+  }
+  swappedList[swappedPageCount-1] = (struct swappedOutRecord) {0};
+  swappedPageCount --;
+  swapin((char *)pa, desired.s);
+  swapfree(desired.s);
+}
+
+void swapOutAndMark(pagetable_t pt, uint64 va, uint64 pa){
+  printf("Inside swapOUTTT pt: %p, va = %p, pa= %p\n", pt, va, pa);
+  if(swappedPageCount == 10000)
+    panic("swapouotAndMark: max limit hit");  //swap out needed
+
+  swappedList[swappedPageCount].s = swapalloc();
+  swappedList[swappedPageCount].pt = pt;
+  swappedList[swappedPageCount].va = va;
+
+  printf("Before swapout of sir\n");
+  swapout(swappedList[swappedPageCount].s, (char *)pa);
+  swappedPageCount ++;
+  //printf("Before kfree\n");
+  kfree((void *)pa);
+  //printf("after kfree\n");
+}
+
+void init_LivePageList(void) { 
+  for (int i = 0; i < MAXPAGES; i++) {
+    livePageList[i].pt = 0;
+    livePageList[i].va = 0;
+  }
+}
+
+void printLivePageCount(){
+  printf("Current live pages = %d\n", livePageCount);
+}
+
+struct pageInfo fetchLivePage(){
+  if(livePageCount <= 0){
+    printf("no live page found. returning a default struct\n");
+    return (struct pageInfo){0,0};
+  }
+  struct pageInfo first = livePageList[0];
+
+  for(int i=0; i<livePageCount-1; i++){
+    livePageList[i] = livePageList[i+1];
+  }
+
+  livePageList[livePageCount - 1] = (struct pageInfo){0,0};
+  livePageCount--;
+  return first;
+}
+
+void printLivePageList(){
+  printf("\nprinting\n---------------");
+  for(int i=0; i<livePageCount; i++){
+    printf("index %d: pagetable: %p, va: %p\n", i, livePageList[i].pt, livePageList[i].va);
+  }
+  printf("\nprinting done\n---------------\n");
+}
+
+void addLivePage(pagetable_t pagetable, uint64 va){
+  uint64 pa;
+  pte_t *pte;
+
+  if(livePageCount == MAXPAGES){
+    printf("addLivePage: MAX LIMIT HIT\n");
+    //printLivePageCount();
+
+    //printLivePageList();
+    printf("Fetching first live page from list\n");
+    struct pageInfo fetched = fetchLivePage();
+
+    pte = walk(fetched.pt, fetched.va, 0);
+    ///printf("pte found as %p\n", pte);
+
+    *pte = (*pte | PTE_SWAP);
+    *pte = (*pte & ~PTE_V);
+    pa = PTE2PA(*pte);
+    //printf("pa found as %p\n", pa);
+
+    swapOutAndMark(fetched.pt, fetched.va, pa);
+
+  }
+
+  livePageList[livePageCount].pt = pagetable;
+  livePageList[livePageCount].va = va;
+  livePageCount ++;
+}
+
+void removeLivePage(pagetable_t pt, uint64 va){
+  int index = -1;
+  for(int i=0; i<livePageCount; i++){
+    if(livePageList[i].pt == pt && livePageList[i].va == va){
+      index = i;
+    }
+  }
+
+  if(index != -1){
+    for(int i=index; i<livePageCount-1; i++){
+      livePageList[i] = livePageList[i+1];
+    }
+    livePageList[livePageCount - 1] = (struct pageInfo){0, 0};
+    livePageCount--;
+  }
+}
+
 void
 kinit()
 {
   initlock(&kmem.lock, "kmem");
+  livePageCount = 0;
+  swappedPageCount = 0;
+  init_LivePageList();
   freerange(end, (void*)PHYSTOP);
 }
 
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..fe68643 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -264,7 +264,7 @@ growproc(int n)
 
   sz = p->sz;
   if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W, 1)) == 0) {
       return -1;
     }
   } else if(n < 0){
@@ -288,12 +288,15 @@ fork(void)
     return -1;
   }
 
+  release(&np->lock);
   // Copy user memory from parent to child.
   if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
     freeproc(np);
-    release(&np->lock);
+    //release(&np->lock);
     return -1;
   }
+
+  acquire(&np->lock);
   np->sz = p->sz;
 
   // copy saved user registers.
@@ -414,9 +417,10 @@ wait(uint64 addr)
             release(&wait_lock);
             return -1;
           }
-          freeproc(pp);
+          //freeproc(pp);
           release(&pp->lock);
           release(&wait_lock);
+          freeproc(pp);
           return pid;
         }
         release(&pp->lock);
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..238c89e 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_SWAP (1L << 8)
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..a5de9f6
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,138 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    //printf("after balloc\n");
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    //printf("after bread\n");
+    memmove(bp->data, src_pa, BSIZE);
+    //printf("after memmove\n");
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..e889134 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_livePageCount(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_livePageCount] sys_livePageCount,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..9deb325 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_livePageCount 22
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..cb8342a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,11 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_livePageCount(void)
+{
+  printLivePageCount();
+  //return getLivePageCount();
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..fce60cc 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -29,6 +29,72 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
+
+int handlePageFault(struct proc* p, uint64 startPoint){
+  pte_t *pte;
+  //uint64 pa;
+  //uint flags;
+  //char *mem;
+  char *targetpa;
+
+  //struct proc *p = myproc();
+  pagetable_t childPT = p->pagetable;
+  //pagetable_t parentPT = proc_pagetable(p->parent);
+  uint64 sz =  p->sz;
+
+  if (startPoint > sz)
+      return -1;
+  
+  if((pte = walk(childPT, startPoint, 0)) == 0){
+      printf("page fault trap handling: pte should exist, scause: %p\n", r_scause());
+      return -1;
+  }
+
+  //pa = PTE2PA(*pte);
+  //flags = PTE_FLAGS(*pte);
+
+  // if((*pte & PTE_V) == 0){
+  //     printf("page fault trap handling: page is not present, valid bit = 0, scause: %p\n", r_scause());
+  //     return -1;
+  // }
+  if((*pte & PTE_U) == 0){
+      printf("page fault trap handling: page is not accessible, scause: %p\n", r_scause());
+      return -1;
+  }
+
+  if((*pte & PTE_SWAP) == 0){
+    printf("page is not even in the swapped out pist, scause: %p\n", r_scause());
+    return -1;
+  }
+
+  if((*pte & PTE_V) == 0 && (*pte & PTE_SWAP) != 0){
+    printf("needs swap in, scause: %p\n", r_scause());
+    if((targetpa = kalloc()) == 0){
+      panic("handlePageFault: cant kalloc for targetpa\n");
+    }
+
+    printf("handle PageFault: before calling swap in\n");
+    swapInAndUpdateList(p->pagetable, startPoint, (uint64)targetpa);
+    *pte = (*pte & ~PTE_SWAP);
+    *pte = (*pte | PTE_V);
+
+    if((*pte & PTE_X) == 0 && (*pte & PTE_U) != 0)
+      addLivePage(childPT, startPoint);
+    // if(mappages(childPT, startPoint, PGSIZE, (uint64)targetpa, flags) != 0){
+    //   kfree(targetpa);
+    //   //refDown(mem);
+    //   printf("handlePagefault: mappages: error\n");
+    //   return -1;
+    // }
+    //addLivePage(p->pid, startPoint);
+    return 0;
+  }
+
+  printf("no problem\n");
+  return 0;
+}
+
+
 //
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
@@ -67,6 +133,13 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
+  }else if(r_scause() == 15 || r_scause() == 13){
+
+    uint64 faultAddress = r_stval();
+    uint64 startPoint = PGROUNDDOWN(faultAddress);
+    if(handlePageFault(p, startPoint))
+      setkilled(p);
+
   } else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..109cff3 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -93,8 +93,10 @@ walk(pagetable_t pagetable, uint64 va, int alloc)
     if(*pte & PTE_V) {
       pagetable = (pagetable_t)PTE2PA(*pte);
     } else {
-      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0)
+      if(!alloc || (pagetable = (pde_t*)kalloc()) == 0){
+        printf("walk returns zero\n");
         return 0;
+    }
       memset(pagetable, 0, PGSIZE);
       *pte = PA2PTE(pagetable) | PTE_V;
     }
@@ -170,6 +172,7 @@ mappages(pagetable_t pagetable, uint64 va, uint64 size, uint64 pa, int perm)
 void
 uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
 {
+  //printf("uvmunmap\n");
   uint64 a;
   pte_t *pte;
 
@@ -179,16 +182,30 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
   for(a = va; a < va + npages*PGSIZE; a += PGSIZE){
     if((pte = walk(pagetable, a, 0)) == 0)
       panic("uvmunmap: walk");
-    if((*pte & PTE_V) == 0)
+    if((*pte & PTE_V) == 0 && (*pte & PTE_SWAP) == 0)
       panic("uvmunmap: not mapped");
     if(PTE_FLAGS(*pte) == PTE_V)
       panic("uvmunmap: not a leaf");
+
     if(do_free){
+      //if((*pte & PTE_X) == 0 && (*pte & PTE_U) != 0)
+      {
+        if((*pte & PTE_SWAP)){
+          removeSwapListElement(pagetable, a);
+          *pte = (*pte & ~PTE_SWAP);
+          *pte = (*pte | PTE_V);
+        }else{
+          removeLivePage(pagetable, a);
+        }
+      }
+
       uint64 pa = PTE2PA(*pte);
       kfree((void*)pa);
     }
     *pte = 0;
   }
+
+  printLivePageCount();
 }
 
 // create an empty user page table.
@@ -223,7 +240,7 @@ uvmfirst(pagetable_t pagetable, uchar *src, uint sz)
 // Allocate PTEs and physical memory to grow process from oldsz to
 // newsz, which need not be page aligned.  Returns new size or 0 on error.
 uint64
-uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
+uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm, int flag)
 {
   char *mem;
   uint64 a;
@@ -244,7 +261,15 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
+
+    if((xperm & PTE_X) == 0 /*&& (xperm & PTE_U) != 0*/ && flag){
+      //printf("adding to livepageList\n");
+      addLivePage(pagetable, a);
+    }
+
   }
+  //printf("after uvm allocing\n");
+  printLivePageCount();
   return newsz;
 }
 
@@ -309,21 +334,44 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   uint64 pa, i;
   uint flags;
   char *mem;
+  char *targetpa;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
-    if((*pte & PTE_V) == 0)
-      panic("uvmcopy: page not present");
+    if((*pte & PTE_V) == 0 && (*pte & PTE_SWAP) == 0)
+      panic("uvmcopy: page not present and not swapped???");
     pa = PTE2PA(*pte);
     flags = PTE_FLAGS(*pte);
     if((mem = kalloc()) == 0)
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
+    
+    // if it is a "swapped" page, swap that page back in 
+    if((*pte & PTE_SWAP)){
+      if((targetpa = kalloc()) == 0)
+        panic("panic: uvmcopy: targetPa cant be kalloced\n");
+      printf("uvmcopy: before running swap in\n");
+      swapInAndUpdateList(old, i, (uint64)targetpa);
+      *pte = (*pte & ~PTE_SWAP);
+      *pte = (*pte | PTE_V);
+      if((*pte & PTE_X) == 0 && (*pte & PTE_U) != 0){
+        printf("swapped out parent is swappned in. now adding to livepagelist\n");
+        addLivePage(old, i);
+        }
+      memmove(mem, (char*)targetpa, PGSIZE);
+      kfree(targetpa);
+    }    
+
     if(mappages(new, i, PGSIZE, (uint64)mem, flags) != 0){
       kfree(mem);
       goto err;
     }
+
+    if((*pte & PTE_X) == 0 && (*pte & PTE_U) != 0){
+      //printf("adding the child pt to livepagelist\n");
+      addLivePage(new, i);
+    }
   }
   return 0;
 
diff --git a/swap.patch b/swap.patch
new file mode 100644
index 0000000..6c0f8ed
--- /dev/null
+++ b/swap.patch
@@ -0,0 +1,210 @@
+diff --git a/Makefile b/Makefile
+index 39a99d7..597ac8c 100644
+--- a/Makefile
++++ b/Makefile
+@@ -24,6 +24,7 @@ OBJS = \
+   $K/sleeplock.o \
+   $K/file.o \
+   $K/pipe.o \
++  $K/swap.o \
+   $K/exec.o \
+   $K/sysfile.o \
+   $K/kernelvec.o \
+diff --git a/kernel/defs.h b/kernel/defs.h
+index a3c962b..b8a6919 100644
+--- a/kernel/defs.h
++++ b/kernel/defs.h
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct swap;
+ 
+ // bio.c
+ void            binit(void);
+@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
+ 
+ // fs.c
+ void            fsinit(int);
++uint            balloc(uint dev);
++void            bfree(int dev, uint b);
+ int             dirlink(struct inode*, char*, uint);
+ struct inode*   dirlookup(struct inode*, char*, uint*);
+ struct inode*   ialloc(uint, short);
+@@ -107,6 +110,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
+ 
++// swap.c
++void            swapinit(void);
++void            swapfree(struct swap*);
++struct swap*    swapalloc(void);
++void            swapout(struct swap *dst_sp, char *src_pa);
++void            swapin(char *dst_pa, struct swap *src_sp);
++
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+ 
+diff --git a/kernel/fs.c b/kernel/fs.c
+index c6bab15..2d9b419 100644
+--- a/kernel/fs.c
++++ b/kernel/fs.c
+@@ -62,7 +62,7 @@ bzero(int dev, int bno)
+ 
+ // Allocate a zeroed disk block.
+ // returns 0 if out of disk space.
+-static uint
++uint
+ balloc(uint dev)
+ {
+   int b, bi, m;
+@@ -88,7 +88,7 @@ balloc(uint dev)
+ }
+ 
+ // Free a disk block.
+-static void
++void
+ bfree(int dev, uint b)
+ {
+   struct buf *bp;
+diff --git a/kernel/swap.c b/kernel/swap.c
+new file mode 100644
+index 0000000..f33bf40
+--- /dev/null
++++ b/kernel/swap.c
+@@ -0,0 +1,135 @@
++#include "types.h"
++#include "riscv.h"
++#include "fs.h"
++#include "spinlock.h"
++#include "defs.h"
++#include "param.h"
++#include "sleeplock.h"
++#include "buf.h"
++
++#define NBLOCKPERPAGE (PGSIZE / BSIZE)
++
++struct swap {
++  uint blocknos[NBLOCKPERPAGE];
++};
++
++struct run {
++  struct run *next;
++};
++
++struct {
++  struct spinlock lock;
++  struct run *freelist;
++} swapmem;
++
++// Initialize swapmem
++void
++swapinit(void)
++{
++  initlock(&swapmem.lock, "swapmem");
++  swapmem.freelist = 0;
++}
++
++// Allocate one swap struct.
++// Returns a pointer to the swap struct.
++// Returns 0 if the memory cannot be allocated.
++struct swap *
++swapalloc(void)
++{
++  struct run *r;
++  struct swap *s;
++
++  acquire(&swapmem.lock);
++  r = swapmem.freelist;
++  if(!r){
++    release(&swapmem.lock);
++    char *mem = kalloc();
++    char *mem_end = mem + PGSIZE;
++    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
++      r = (struct run*)mem;
++
++      acquire(&swapmem.lock);
++      r->next = swapmem.freelist;
++      swapmem.freelist = r;
++      release(&swapmem.lock);
++    }
++    acquire(&swapmem.lock);
++    r = swapmem.freelist;
++  }
++  swapmem.freelist = r->next;
++  release(&swapmem.lock);
++  
++  s = (struct swap*)r;
++  if(s)
++    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
++  
++  return s;
++}
++
++// Free the swap struct pointed by s, and the blocks
++// contained in s, which normally should have been returned
++// by a call to swapalloc() and swapout().
++void
++swapfree(struct swap *s)
++{
++  uint *blockno;
++  struct run *r;
++
++  if(!s)
++    panic("swapfree");
++  
++  begin_op();
++  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
++    if(*blockno)
++      bfree(ROOTDEV, *blockno);
++  }
++  end_op();
++
++  r = (struct run*)s;
++
++  acquire(&swapmem.lock);
++  r->next = swapmem.freelist;
++  swapmem.freelist = r;
++  release(&swapmem.lock);
++}
++
++// Swap out a given physical page src_pa to disk.
++// The metadata for retriving src_pa will be saved
++// to dst_pa which normally should have been returned
++// by a call to swapalloc().
++void
++swapout(struct swap *dst_sp, char *src_pa)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  begin_op();
++  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
++    *blockno = balloc(ROOTDEV);
++    if(*blockno == 0)
++      panic("swapout");
++    bp = bread(ROOTDEV, *blockno);
++    memmove(bp->data, src_pa, BSIZE);
++    log_write(bp);
++    brelse(bp);
++  }
++  end_op();
++}
++
++// Swap in a page into dst_pa from disk using src_sp.
++// src_sp should normally be updated with metadata
++// for retriving the page by a call to swapout().
++void
++swapin(char *dst_pa, struct swap *src_sp)
++{
++  uint *blockno;
++  struct buf *bp;
++  
++  if(!dst_pa)
++    panic("swapin");
++  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
++    bp = bread(ROOTDEV, *blockno);
++    memmove(dst_pa, bp->data, BSIZE);
++    brelse(bp);
++  }
++}
diff --git a/user/pagetest.c b/user/pagetest.c
new file mode 100644
index 0000000..4f4776e
--- /dev/null
+++ b/user/pagetest.c
@@ -0,0 +1,17 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int main(int argc, char *argv[]) {
+    char *mem[15];
+    for (int i = 0; i < 15; ++i) {
+        mem[i] = sbrk(PGSIZE);
+        mem[i][0] = i;
+    }
+    for (int i = 0; i < 15; ++i)
+        printf("%d\n", mem[i][0]);
+    for (int i = 0; i < 15; ++i)
+        free((void *) mem);
+    return 0;
+}
\ No newline at end of file
diff --git a/user/test1.c b/user/test1.c
new file mode 100644
index 0000000..7529bd8
--- /dev/null
+++ b/user/test1.c
@@ -0,0 +1,37 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int 
+main(int argc, char *argv[]){
+  if(argc != 2){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  int numberOfPages = atoi(argv[1]);
+  if(numberOfPages < 0){
+    fprintf(2, "%s:failed test\n", argv[0]);
+    exit(1);
+  }
+
+  for(int i = 0; i < numberOfPages; i++){
+    sbrk(4096);
+  }
+
+  while(1){}
+  exit(0);
+}
+
+
+    //   char *mem[15];
+    // for (int i = 0; i < 15; ++i) {
+    //     mem[i] = sbrk(4096);
+    //     mem[i][0] = i;
+    // }
+    // for (int i = 0; i < 15; ++i)
+    //     printf("%d\n", mem[i][0]);
+    // for (int i = 0; i < 15; ++i)
+    //     free((void *) mem);
+    // return 0;
diff --git a/user/test2.c b/user/test2.c
new file mode 100644
index 0000000..3f674c2
--- /dev/null
+++ b/user/test2.c
@@ -0,0 +1,21 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "kernel/param.h"
+
+int 
+main(int argc, char *argv[]){
+  if(argc != 1){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  int count = livePageCount();
+
+  if(count < 0){
+    fprintf(2, "%s: test2 failed\n", argv[0]);
+    exit(1);
+  }
+  printf("Current Total Live pages = %d\n", count);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..e00c675 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int livePageCount(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d1e78ae 100644
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("livePageCount");
