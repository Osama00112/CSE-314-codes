diff --git a/Makefile b/Makefile
index 39a99d7..11fa870 100644
--- a/Makefile
+++ b/Makefile
@@ -24,6 +24,7 @@ OBJS = \
   $K/sleeplock.o \
   $K/file.o \
   $K/pipe.o \
+  $K/swap.o \
   $K/exec.o \
   $K/sysfile.o \
   $K/kernelvec.o \
@@ -62,6 +63,8 @@ CFLAGS += -mcmodel=medany
 CFLAGS += -ffreestanding -fno-common -nostdlib -mno-relax
 CFLAGS += -I.
 CFLAGS += $(shell $(CC) -fno-stack-protector -E -x c /dev/null >/dev/null 2>&1 && echo -fno-stack-protector)
+#CFLAGS += -g
+#ASFLAGS += -g
 
 # Disable PIE when possible (for Ubuntu 16.10 toolchain)
 ifneq ($(shell $(CC) -dumpspecs 2>/dev/null | grep -e '[^f]no-pie'),)
@@ -132,6 +135,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_cow-test\
+	$U/_pginfo\
+	$U/_cow-test2\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/Makefile.rej b/Makefile.rej
new file mode 100644
index 0000000..9fcd50e
--- /dev/null
+++ b/Makefile.rej
@@ -0,0 +1,9 @@
+diff a/Makefile b/Makefile	(rejected hunks)
+@@ -24,6 +24,7 @@ OBJS = \
+   $K/sleeplock.o \
+   $K/file.o \
+   $K/pipe.o \
++  $K/swap.o \
+   $K/exec.o \
+   $K/sysfile.o \
+   $K/kernelvec.o \
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..56b57db 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,8 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct swap;
+struct run;
 
 // bio.c
 void            binit(void);
@@ -36,6 +38,8 @@ int             filewrite(struct file*, uint64, int n);
 
 // fs.c
 void            fsinit(int);
+uint            balloc(uint dev);
+void            bfree(int dev, uint b);
 int             dirlink(struct inode*, char*, uint);
 struct inode*   dirlookup(struct inode*, char*, uint*);
 struct inode*   ialloc(uint, short);
@@ -63,6 +67,9 @@ void            ramdiskrw(struct buf*);
 void*           kalloc(void);
 void            kfree(void *);
 void            kinit(void);
+int             refDown(void *);
+int             refUp(void *);
+int             free_mem_count();
 
 // log.c
 void            initlog(int, struct superblock*);
@@ -106,6 +113,14 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+void            pginfo(void);
+
+// swap.c
+void            swapinit(void);
+void            swapfree(struct swap*);
+struct swap*    swapalloc(void);
+void            swapout(struct swap *dst_sp, char *src_pa);
+void            swapin(char *dst_pa, struct swap *src_sp);
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -147,6 +162,7 @@ void            trapinit(void);
 void            trapinithart(void);
 extern struct spinlock tickslock;
 void            usertrapret(void);
+int             COW_Step4(struct proc*, uint64);
 
 // uart.c
 void            uartinit(void);
diff --git a/kernel/defs.h.rej b/kernel/defs.h.rej
new file mode 100644
index 0000000..fa51c79
--- /dev/null
+++ b/kernel/defs.h.rej
@@ -0,0 +1,32 @@
+diff a/kernel/defs.h b/kernel/defs.h	(rejected hunks)
+@@ -8,6 +8,7 @@ struct spinlock;
+ struct sleeplock;
+ struct stat;
+ struct superblock;
++struct swap;
+ 
+ // bio.c
+ void            binit(void);
+@@ -36,6 +37,8 @@ int             filewrite(struct file*, uint64, int n);
+ 
+ // fs.c
+ void            fsinit(int);
++uint            balloc(uint dev);
++void            bfree(int dev, uint b);
+ int             dirlink(struct inode*, char*, uint);
+ struct inode*   dirlookup(struct inode*, char*, uint*);
+ struct inode*   ialloc(uint, short);
+@@ -107,6 +110,13 @@ int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
+ int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
+ void            procdump(void);
+ 
++// swap.c
++void            swapinit(void);
++void            swapfree(struct swap*);
++struct swap*    swapalloc(void);
++void            swapout(struct swap *dst_sp, char *src_pa);
++void            swapin(char *dst_pa, struct swap *src_sp);
++
+ // swtch.S
+ void            swtch(struct context*, struct context*);
+ 
diff --git a/kernel/fs.c b/kernel/fs.c
index c6bab15..2d9b419 100644
--- a/kernel/fs.c
+++ b/kernel/fs.c
@@ -62,7 +62,7 @@ bzero(int dev, int bno)
 
 // Allocate a zeroed disk block.
 // returns 0 if out of disk space.
-static uint
+uint
 balloc(uint dev)
 {
   int b, bi, m;
@@ -88,7 +88,7 @@ balloc(uint dev)
 }
 
 // Free a disk block.
-static void
+void
 bfree(int dev, uint b)
 {
   struct buf *bp;
diff --git a/kernel/fs.c.rej b/kernel/fs.c.rej
new file mode 100644
index 0000000..f64b69a
--- /dev/null
+++ b/kernel/fs.c.rej
@@ -0,0 +1,19 @@
+diff a/kernel/fs.c b/kernel/fs.c	(rejected hunks)
+@@ -62,7 +62,7 @@ bzero(int dev, int bno)
+ 
+ // Allocate a zeroed disk block.
+ // returns 0 if out of disk space.
+-static uint
++uint
+ balloc(uint dev)
+ {
+   int b, bi, m;
+@@ -88,7 +88,7 @@ balloc(uint dev)
+ }
+ 
+ // Free a disk block.
+-static void
++void
+ bfree(int dev, uint b)
+ {
+   struct buf *bp;
diff --git a/kernel/kalloc.c b/kernel/kalloc.c
index 0699e7e..e1f0833 100644
--- a/kernel/kalloc.c
+++ b/kernel/kalloc.c
@@ -9,6 +9,9 @@
 #include "riscv.h"
 #include "defs.h"
 
+#define maxPages (PHYSTOP/PGSIZE)
+//void *pa_start;
+
 void freerange(void *pa_start, void *pa_end);
 
 extern char end[]; // first address after kernel.
@@ -16,6 +19,7 @@ extern char end[]; // first address after kernel.
 
 struct run {
   struct run *next;
+  int refCount;
 };
 
 struct {
@@ -23,20 +27,65 @@ struct {
   struct run *freelist;
 } kmem;
 
+struct{
+  struct spinlock lock;
+  int pageRefCount[maxPages];
+} pageInfo;
+
 void
 kinit()
 {
+  // acquire(&pageInfo.lock);
+  // for(int i=0; i<maxPages; i++){
+  //   pageInfo.pageRefCount[i] = 0;
+  // }
+  // release(&pageInfo.lock);
   initlock(&kmem.lock, "kmem");
+  initlock(&pageInfo.lock, "pageInfo");
   freerange(end, (void*)PHYSTOP);
 }
 
+void init_pageRefCount(void * pa){
+  int idx = (uint64) pa / PGSIZE;
+  acquire(&pageInfo.lock);
+  pageInfo.pageRefCount[idx] = 1;
+  release(&pageInfo.lock);
+}
+
+int refDown(void *pa){
+    int idx = (uint64) pa / PGSIZE;
+
+    acquire(&pageInfo.lock);
+    pageInfo.pageRefCount[idx]--;
+    release(&pageInfo.lock);
+    return pageInfo.pageRefCount[idx];
+}
+
+int refUp(void *pa){
+    int idx = (uint64) pa / PGSIZE;
+
+    acquire(&pageInfo.lock);
+    pageInfo.pageRefCount[idx]++;
+    release(&pageInfo.lock);
+    return pageInfo.pageRefCount[idx];
+}
+
+int getRefCount(void *pa){
+  int idx = (uint64) pa / PGSIZE;
+  return pageInfo.pageRefCount[idx];
+}
+
 void
 freerange(void *pa_start, void *pa_end)
 {
   char *p;
   p = (char*)PGROUNDUP((uint64)pa_start);
-  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE)
+  for(; p + PGSIZE <= (char*)pa_end; p += PGSIZE){
+    //refUp(p);
+    init_pageRefCount((void *)p);
     kfree(p);
+    //refDown(p);
+  }
 }
 
 // Free the page of physical memory pointed at by pa,
@@ -51,15 +100,22 @@ kfree(void *pa)
   if(((uint64)pa % PGSIZE) != 0 || (char*)pa < end || (uint64)pa >= PHYSTOP)
     panic("kfree");
 
-  // Fill with junk to catch dangling refs.
-  memset(pa, 1, PGSIZE);
+  if((getRefCount(pa) - 1) == 0){
+    // Fill with junk to catch dangling refs.
+    memset(pa, 1, PGSIZE);
 
-  r = (struct run*)pa;
+    r = (struct run*)pa;
 
-  acquire(&kmem.lock);
-  r->next = kmem.freelist;
-  kmem.freelist = r;
-  release(&kmem.lock);
+    acquire(&kmem.lock);
+    r->next = kmem.freelist;
+    kmem.freelist = r;
+    release(&kmem.lock);
+  }
+  
+  else{
+    refDown(pa);
+  }
+  
 }
 
 // Allocate one 4096-byte page of physical memory.
@@ -72,11 +128,25 @@ kalloc(void)
 
   acquire(&kmem.lock);
   r = kmem.freelist;
-  if(r)
+  if(r){
     kmem.freelist = r->next;
+    init_pageRefCount((void *)r);
+  }
   release(&kmem.lock);
 
   if(r)
     memset((char*)r, 5, PGSIZE); // fill with junk
   return (void*)r;
 }
+
+
+int free_mem_count(){
+  struct run *current;
+  acquire(&kmem.lock);
+  current = kmem.freelist;
+  int bytes = 0;
+  for(current = kmem.freelist; current != 0; current = current->next)
+    bytes ++;
+  release(&kmem.lock);
+  return bytes;
+}
\ No newline at end of file
diff --git a/kernel/memlayout.h b/kernel/memlayout.h
index 776f98c..d5977b8 100644
--- a/kernel/memlayout.h
+++ b/kernel/memlayout.h
@@ -65,3 +65,4 @@
 //   TRAPFRAME (p->trapframe, used by the trampoline)
 //   TRAMPOLINE (the same page as in the kernel)
 #define TRAPFRAME (TRAMPOLINE - PGSIZE)
+
diff --git a/kernel/pipe.c b/kernel/pipe.c
index f6b501a..72e3a60 100644
--- a/kernel/pipe.c
+++ b/kernel/pipe.c
@@ -46,8 +46,10 @@ pipealloc(struct file **f0, struct file **f1)
   return 0;
 
  bad:
-  if(pi)
+  if(pi){
     kfree((char*)pi);
+    //refDown((char*)pi);
+    }
   if(*f0)
     fileclose(*f0);
   if(*f1)
@@ -69,6 +71,7 @@ pipeclose(struct pipe *pi, int writable)
   if(pi->readopen == 0 && pi->writeopen == 0){
     release(&pi->lock);
     kfree((char*)pi);
+    //refDown((char*)pi);
   } else
     release(&pi->lock);
 }
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..4f78820 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -119,6 +119,8 @@ allocproc(void)
       release(&p->lock);
     }
   }
+
+  printf("no unused procs found\n");
   return 0;
 
 found:
@@ -129,6 +131,7 @@ found:
   if((p->trapframe = (struct trapframe *)kalloc()) == 0){
     freeproc(p);
     release(&p->lock);
+    printf("trapframe could not be allocated\n");
     return 0;
   }
 
@@ -137,6 +140,7 @@ found:
   if(p->pagetable == 0){
     freeproc(p);
     release(&p->lock);
+    printf("pagetable is empty\n");
     return 0;
   }
 
@@ -155,8 +159,10 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
+  if(p->trapframe){
     kfree((void*)p->trapframe);
+    //refDown((void*)p->trapframe);
+    }
   p->trapframe = 0;
   if(p->pagetable)
     proc_freepagetable(p->pagetable, p->sz);
@@ -681,3 +687,28 @@ procdump(void)
     printf("\n");
   }
 }
+
+void
+pginfo(void)
+{
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++){
+    if (p->state == RUNNING){
+      pte_t *pt = p->pagetable;
+
+      int count = 0;
+      for (int j = 0; j < MAXVA >> PGSHIFT; j++) {
+        pte_t pte = pt[j];
+        if ((pte & PTE_V) != 0) {
+            count ++;
+        }
+      }
+      int totalPagesUsed = count * PGSIZE;
+      printf("Process %d uses %d pages\n", p->pid, totalPagesUsed);
+    }
+  }
+
+  int freeMemory = free_mem_count()*PGSIZE;
+  printf("\nNo of free memory: %d",freeMemory);
+
+}
diff --git a/kernel/riscv.h b/kernel/riscv.h
index 20a01db..7fe795f 100644
--- a/kernel/riscv.h
+++ b/kernel/riscv.h
@@ -343,6 +343,7 @@ typedef uint64 *pagetable_t; // 512 PTEs
 #define PTE_W (1L << 2)
 #define PTE_X (1L << 3)
 #define PTE_U (1L << 4) // user can access
+#define PTE_F (1L << 9) // to track if a page is COW or not
 
 // shift a physical address to the right place for a PTE.
 #define PA2PTE(pa) ((((uint64)pa) >> 12) << 10)
diff --git a/kernel/swap.c b/kernel/swap.c
new file mode 100644
index 0000000..8807799
--- /dev/null
+++ b/kernel/swap.c
@@ -0,0 +1,135 @@
+#include "types.h"
+#include "riscv.h"
+#include "fs.h"
+#include "spinlock.h"
+#include "defs.h"
+#include "param.h"
+#include "sleeplock.h"
+#include "buf.h"
+
+#define NBLOCKPERPAGE (PGSIZE / BSIZE)
+
+struct swap {
+  uint blocknos[NBLOCKPERPAGE];
+};
+
+struct run {
+  struct run *next;
+};
+
+struct {
+  struct spinlock lock;
+  struct run *freelist;
+} swapmem;
+
+// Initialize swapmem
+void
+swapinit(void)
+{
+  initlock(&swapmem.lock, "swapmem");
+  swapmem.freelist = 0;
+}
+
+// Allocate one swap struct.
+// Returns a pointer to the swap struct.
+// Returns 0 if the memory cannot be allocated.
+struct swap *
+swapalloc(void)
+{
+  struct run *r;
+  struct swap *s;
+
+  acquire(&swapmem.lock);
+  r = swapmem.freelist;
+  if(!r){
+    release(&swapmem.lock);
+    char *mem = kalloc();
+    char *mem_end = mem + PGSIZE;
+    for(; mem + sizeof(struct swap) <= mem_end; mem += sizeof(struct swap)){
+      r = (struct run*)mem;
+
+      acquire(&swapmem.lock);
+      r->next = swapmem.freelist;
+      swapmem.freelist = r;
+      release(&swapmem.lock);
+    }
+    acquire(&swapmem.lock);
+    r = swapmem.freelist;
+  }
+  swapmem.freelist = r->next;
+  release(&swapmem.lock);
+
+  s = (struct swap*)r;
+  if(s)
+    memset((char*)s->blocknos, 0, sizeof(s->blocknos)); // fill with zeros
+
+  return s;
+}
+
+// Free the swap struct pointed by s, and the blocks
+// contained in s, which normally should have been returned
+// by a call to swapalloc() and swapout().
+void
+swapfree(struct swap *s)
+{
+  uint *blockno;
+  struct run *r;
+
+  if(!s)
+    panic("swapfree");
+
+  begin_op();
+  for(blockno = s->blocknos; blockno < &s->blocknos[NBLOCKPERPAGE]; blockno++){
+    if(*blockno)
+      bfree(ROOTDEV, *blockno);
+  }
+  end_op();
+
+  r = (struct run*)s;
+
+  acquire(&swapmem.lock);
+  r->next = swapmem.freelist;
+  swapmem.freelist = r;
+  release(&swapmem.lock);
+}
+
+// Swap out a given physical page src_pa to disk.
+// The metadata for retriving src_pa will be saved
+// to dst_pa which normally should have been returned
+// by a call to swapalloc().
+void
+swapout(struct swap *dst_sp, char *src_pa)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  begin_op();
+  for(blockno = dst_sp->blocknos; blockno < &dst_sp->blocknos[NBLOCKPERPAGE]; blockno++, src_pa += BSIZE){
+    *blockno = balloc(ROOTDEV);
+    if(*blockno == 0)
+      panic("swapout");
+    bp = bread(ROOTDEV, *blockno);
+    memmove(bp->data, src_pa, BSIZE);
+    log_write(bp);
+    brelse(bp);
+  }
+  end_op();
+}
+
+// Swap in a page into dst_pa from disk using src_sp.
+// src_sp should normally be updated with metadata
+// for retriving the page by a call to swapout().
+void
+swapin(char *dst_pa, struct swap *src_sp)
+{
+  uint *blockno;
+  struct buf *bp;
+
+  if(!dst_pa)
+    panic("swapin");
+  for(blockno = src_sp->blocknos; blockno < &src_sp->blocknos[NBLOCKPERPAGE]; blockno++, dst_pa += BSIZE){
+    bp = bread(ROOTDEV, *blockno);
+    memmove(dst_pa, bp->data, BSIZE);
+    brelse(bp);
+  }
+}
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..2f35df8 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,7 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_pginfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +127,7 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_pginfo]  sys_pginfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..2cefa39 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,4 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_pginfo 22
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..26ee327 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -463,14 +463,17 @@ sys_exec(void)
 
   int ret = exec(path, argv);
 
-  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++){
     kfree(argv[i]);
-
+    //refDown(argv[i]);
+}
   return ret;
 
  bad:
-  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++)
+  for(i = 0; i < NELEM(argv) && argv[i] != 0; i++){
     kfree(argv[i]);
+    //refDown(argv[i]);
+}
   return -1;
 }
 
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..d63363a 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,12 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+
+uint64 
+sys_pginfo(void)
+{
+  pginfo();
+
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..8d9f3cc 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -29,6 +29,76 @@ trapinithart(void)
   w_stvec((uint64)kernelvec);
 }
 
+int COW_Step4(struct proc* p, uint64 startPoint){
+    pte_t *pte;
+    uint64 pa;
+    uint flags;
+    char *mem;
+
+    //struct proc *p = myproc();
+    pagetable_t childPT = p->pagetable;
+    //pagetable_t parentPT = proc_pagetable(p->parent);
+    uint64 sz =  p->sz;
+
+    if (startPoint > sz)
+        return -1;
+    
+    if((pte = walk(childPT, startPoint, 0)) == 0){
+        printf("page fault trap handling: pte should exist, scause: %p\n", r_scause());
+        return -1;
+    }
+
+    // if((*pte & PTE_F)){
+    //   printf("its a cow page\n");
+    // }
+    if((*pte & PTE_V) == 0){
+        printf("page fault trap handling: page is not present, valid bit = 0, scause: %p\n", r_scause());
+        return -1;
+    }
+    if((*pte & PTE_U) == 0){
+        printf("page fault trap handling: page is not accessible, scause: %p\n", r_scause());
+        return -1;
+    }
+    if((*pte & PTE_F) == 0){
+        printf("page fault trap handling: page is not COW, scause: %p\n", r_scause());
+        return -1;
+    }
+    if((*pte & PTE_W) == 0 && (*pte & PTE_F) == 0){
+        printf("page fault trap handling: not writable and page is not COW, scause: %p\n", r_scause());
+        return -1;
+    }
+
+    if((mem = kalloc()) == 0){
+        printf("usertrap: cant kalloc\n");
+        return -1;
+    }
+
+    pa = PTE2PA(*pte);
+    flags = PTE_FLAGS(*pte);
+    
+    // setting the write flag of childPT PTE
+    flags = flags | (PTE_W | PTE_R | PTE_V | PTE_U);
+    flags = flags & (~PTE_F);
+    //flags = flags | PTE_V;
+    //*pte = (*pte | PTE_W);
+    //clear cow flag
+    //*pte = (*pte & ~PTE_F);
+
+    memmove((void *)mem, (void *)pa, PGSIZE);
+    
+    uvmunmap(childPT, startPoint, 1, 0);
+    refDown((void*)pa );
+
+    if(mappages(childPT, startPoint, PGSIZE, (uint64)mem, flags) != 0){
+        kfree(mem);
+        //refDown(mem);
+        printf("usertrap: mappages: error\n");
+        return -1;
+    }
+
+    // issue: shouldn't we unmap in case mappage fails
+    return 0;
+}
 //
 // handle an interrupt, exception, or system call from user space.
 // called from trampoline.S
@@ -67,7 +137,16 @@ usertrap(void)
     syscall();
   } else if((which_dev = devintr()) != 0){
     // ok
-  } else {
+  }else if( r_scause() == 0xd || r_scause() == 0xf) {
+    // page fault
+    //printf("Trap: scause value %p\n", r_scause());
+    uint64 faultAddress = r_stval();
+    uint64 startPoint = PGROUNDDOWN(faultAddress);
+    if(COW_Step4(p,startPoint)){
+        setkilled(p);
+    }
+  }
+   else {
     printf("usertrap(): unexpected scause %p pid=%d\n", r_scause(), p->pid);
     printf("            sepc=%p stval=%p\n", r_sepc(), r_stval());
     setkilled(p);
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..341f5e0 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -6,6 +6,7 @@
 #include "defs.h"
 #include "fs.h"
 
+
 /*
  * the kernel's page table.
  */
@@ -186,6 +187,7 @@ uvmunmap(pagetable_t pagetable, uint64 va, uint64 npages, int do_free)
     if(do_free){
       uint64 pa = PTE2PA(*pte);
       kfree((void*)pa);
+      //refDown((void*)pa);
     }
     *pte = 0;
   }
@@ -241,6 +243,7 @@ uvmalloc(pagetable_t pagetable, uint64 oldsz, uint64 newsz, int xperm)
     memset(mem, 0, PGSIZE);
     if(mappages(pagetable, a, PGSIZE, (uint64)mem, PTE_R|PTE_U|xperm) != 0){
       kfree(mem);
+      //refDown(mem);
       uvmdealloc(pagetable, a, oldsz);
       return 0;
     }
@@ -284,6 +287,7 @@ freewalk(pagetable_t pagetable)
     }
   }
   kfree((void*)pagetable);
+  //refDown((void*)pagetable);
 }
 
 // Free user memory pages,
@@ -308,15 +312,26 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   pte_t *pte;
   uint64 pa, i;
   uint flags;
-  char *mem;
+  //char *mem;
 
   for(i = 0; i < sz; i += PGSIZE){
     if((pte = walk(old, i, 0)) == 0)
       panic("uvmcopy: pte should exist");
     if((*pte & PTE_V) == 0)
       panic("uvmcopy: page not present");
+
     pa = PTE2PA(*pte);
+    
+    {  
+      // clearing the write flag of old PTE
+      *pte = *pte & (~PTE_W);
+      // marking as COW
+      *pte = *pte | (PTE_F);
+      }
+
+    
     flags = PTE_FLAGS(*pte);
+    /*
     if((mem = kalloc()) == 0)
       goto err;
     memmove(mem, (char*)pa, PGSIZE);
@@ -324,6 +339,13 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
       kfree(mem);
       goto err;
     }
+    */
+    // child PTE also has the write flag cleared
+    if(mappages(new, i, PGSIZE, pa, flags) != 0){
+      goto err;
+    }
+
+    refUp((void *)pa);
   }
   return 0;
 
@@ -352,9 +374,32 @@ int
 copyout(pagetable_t pagetable, uint64 dstva, char *src, uint64 len)
 {
   uint64 n, va0, pa0;
+  pte_t *pte;
+  struct proc *p = myproc();
+  uint64 startPoint;
 
   while(len > 0){
     va0 = PGROUNDDOWN(dstva);
+    if(va0 >= MAXVA){
+        return -1;
+    }
+        
+    pte = walk(pagetable,va0,0);
+
+    if(pte == 0){
+        return -1;
+    }
+
+    startPoint = PGROUNDDOWN(va0);
+    
+
+    if(*pte & PTE_F){
+        if(COW_Step4(p, startPoint)){
+            setkilled(p);
+            return -1;
+        }
+    }
+
     pa0 = walkaddr(pagetable, va0);
     if(pa0 == 0)
       return -1;
diff --git a/user/cow-test.c b/user/cow-test.c
new file mode 100644
index 0000000..47bcaaf
--- /dev/null
+++ b/user/cow-test.c
@@ -0,0 +1,107 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[]){
+    int x = 1;
+    int pid = fork();
+    if (pid == 0) {
+	    printf("Child has x = %d\n", ++x);
+    } 
+    else {
+        wait(0);
+	    printf("Parent has x = %d\n", --x);
+    }
+    printf("Bye from process %d with x = %d\n", getpid(), x);
+    exit(0);
+}
+
+/*
+
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int a = 1;
+
+void test1()
+{
+    printf(1,"%d free pages before forking\n",getNumFreePages());
+    printf(1,"Parent and Child share the global variable a \n");
+    int pid = fork();
+    if(pid==0)
+    {
+        printf(1,"Child: a = %d\n",a);
+        printf(1,"%d free pages before any changes\n",getNumFreePages());
+        a = 2;
+        printf(1,"Child: a = %d\n",a);
+        printf(1,"%d free pages after changing a\n",getNumFreePages());
+        exit();
+    }
+    printf(1,"Parent: a = %d\n",a);
+    wait();
+    printf(1,"Parent: a = %d\n",a);
+    printf(1,"%d free pages after wait\n",getNumFreePages());
+    return ;
+}
+
+void test2()
+{
+    printf(1,"%d free pages before fork-1\n",getNumFreePages());
+    if(fork()==0)
+    {
+        exit();
+    }
+    else
+    {
+        printf(1,"%d free pages before fork-2\n",getNumFreePages());
+        if(fork()==0)
+        {
+            printf(1,"%d free pages before changes in Child-2\n",getNumFreePages());
+            a = 5;
+            printf(1,"%d free pages after changes in Child-2\n",getNumFreePages());
+            exit();
+        }
+        wait();
+        printf(1,"%d free pages after reaping Child-1\n",getNumFreePages());
+    }
+    wait();
+    printf(1,"%d free pages after reaping Child-2\n",getNumFreePages());
+    return ;
+}
+
+void test3()
+{
+    printf(1,"%d free pages before fork\n",getNumFreePages());
+    int pid = fork();
+    if(pid==0)
+    {
+        sleep(4);
+        printf(1,"%d free pages before changes in Child\n",getNumFreePages());
+        a = 5;
+        printf(1,"%d free pages after changes in Child\n",getNumFreePages());
+        exit();
+    }
+    printf(1,"%d free pages before Parent exits\n",getNumFreePages());
+    exit();
+    return ;
+}
+
+
+int main(void)
+{
+    printf(1,"Test1 running....\n");
+    test1();
+    printf(1,"Test1 finished\n");
+    printf(1,"--------------------\n");
+    printf(1,"Test2 running....\n");
+    test2();
+    printf(1,"Test2 finished\n");
+    printf(1,"--------------------\n");
+    printf(1,"Test3 running....\n");
+    test3();
+    printf(1,"Test3 finished\n");
+    exit();
+}
+*/
\ No newline at end of file
diff --git a/user/cow-test2.c b/user/cow-test2.c
new file mode 100644
index 0000000..1eb1567
--- /dev/null
+++ b/user/cow-test2.c
@@ -0,0 +1,26 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[]){
+
+    int x;
+    int rc = fork();
+    if (rc < 0){
+        //printf("fork failed\n");
+        
+    }else if(rc == 0){
+        //printf("child proess running\n");
+        x = *(int *)0x1000;
+        printf("Value found from memory: %d\n", x);
+    }
+    else{
+        //printf("parent process running\n");
+        wait(0);
+        x = *(int *)0x1000;
+        printf("Value found from memory: %d\n", x);
+    }
+    return 0;
+
+}
\ No newline at end of file
diff --git a/user/pginfo.c b/user/pginfo.c
new file mode 100644
index 0000000..037601d
--- /dev/null
+++ b/user/pginfo.c
@@ -0,0 +1,71 @@
+#include "kernel/types.h"
+#include "kernel/riscv.h"
+#include "user/user.h"
+
+void
+pinfo() {
+  if (pginfo() < 0) {
+    printf("FAIL: sysinfo failed");
+    exit(1);
+  }
+}
+
+
+void
+testmem() {
+  printf("\n\t\t\tTesting memory\n");
+  printf("\nInitial State\n");
+  pinfo();
+
+  printf("Using up one more page (4094 bytes).\nFreemem should reduce by that much!\n");
+  if((uint64)sbrk(PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  pinfo();
+
+  printf("Giving back that one more page to the pool (4094 bytes).\nFreemem should go back to the initial value!\n");
+  
+  if((uint64)sbrk(-PGSIZE) == 0xffffffffffffffff){
+    printf("sbrk failed");
+    exit(1);
+  }
+
+  pinfo();
+}
+
+void testproc() {
+  int status;
+  int pid;
+
+  printf("\n\t\t\tTesting nproc\n");
+  printf("\nInitial State\n");
+  pinfo();
+
+  pid = fork();
+  if(pid < 0){
+    printf("sysinfotest: fork failed\n");
+    exit(1);
+  }
+  if(pid == 0){  // inside the child process
+    printf("Created one new process. So nproc should increase by 1.");
+    pinfo();
+    exit(0);
+  }
+
+  wait(&status); // wait for the created child process to end
+  printf("Created process ended. So nproc should go back to initial value.");
+  pinfo(); 
+}
+
+
+int
+main(int argc, char *argv[])
+{
+  printf("sysinfotest: start\n");
+  testmem();
+  testproc();
+  printf("sysinfotest: done\n");
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..6d45365 100644
--- a/user/user.h
+++ b/user/user.h
@@ -22,6 +22,7 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int pginfo(void);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usertests.c b/user/usertests.c
index 7d3e9bc..1283237 100644
--- a/user/usertests.c
+++ b/user/usertests.c
@@ -2438,10 +2438,13 @@ textwrite(char *s)
     exit(1);
   }
   wait(&xstatus);
+  printf("After wait\n");
   if(xstatus == -1)  // kernel killed child?
-    exit(0);
+    { printf("child proc error\n");
+    exit(0);}
   else
-    exit(xstatus);
+    {printf("xstatus : %d\n", xstatus);
+    exit(xstatus);}
 }
 
 // regression test. copyin(), copyout(), and copyinstr() used to cast
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..8ac0b4e 100644
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,4 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("pginfo");
